package ict.ada.gdb.cache;

import ict.ada.gdb.util.FileScanner;

import java.io.BufferedReader;
import java.io.InputStreamReader;

import org.apache.hadoop.fs.Path;

/**
 * 
 * Read an HDFS file containing each Node's gain/cost in descending order ( generated by Hive ), and
 * apply the Greedy KnapSack algorithm to choose Nodes for GdbCache
 * 
 */
public class NodeChooserKnapSack {

  private void solve(String fileName, long MC) throws Exception {
    FileScanner fs = new FileScanner(fileName);
    if (fs.hasNext()) {
      final int READ_BUF = 10 * 1024 * 1024;
      Path fp = fs.next();
      BufferedReader cin = new BufferedReader(new InputStreamReader(fs.getFileSystem().open(fp,
          READ_BUF), "UTF-8"), READ_BUF);
      long totalC = 0;
      double totalGain = 0;
      int cnt = 0;

      try {
        String line;
        while (null != (line = cin.readLine())) {
          // node_id_hex ratio memcost count
          String[] t = line.split("\t");
          int cost = Integer.parseInt(t[2]);
          double count = Double.parseDouble(t[3]);
          if (totalC + cost > MC) {// stop
            if (count > totalGain) {
              cnt = 1;
              totalC = cost;
              totalGain = count;
              System.out.println("DROP ALL BEFORE!\n  Accept Line=" + line);
            }
            break;
          } else {
            cnt++;
            totalGain += count;
            totalC += cost;
            System.out.println(t[0]);
          }
        }
      } finally {
        cin.close();
      }
      System.out.println("MC= " + MC + " Cnt= " + cnt + " TotalCost= " + totalC + " TotalGain= "
          + totalGain);
    }
  }

  public static void main(String[] args) throws Exception {
    if (args.length != 1) {
      System.err.println("Usage: [MC value]");// max memory cost
      return;
    }
    new NodeChooserKnapSack().solve("hdfs://10.100.1.35/hive-gdb/gdbcache.db/node_ratio",
        Integer.parseInt(args[0]));
  }
}
